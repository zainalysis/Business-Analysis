# -*- coding: utf-8 -*-
"""Fred Economic Analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-6UCn1N6Oy8C5WX03SFgWOwZ_UVkxiCo
"""

!pip install fredapi > /dev/null

import pandas as pd  # For data manipulation
import numpy as np   # For numerical operations
import plotly.express as px  # For interactive plotting with Plotly

# Set pandas option to display up to 500 columns
pd.set_option('display.max_columns', 500)

# Plotly color palette (equivalent to Matplotlib's color cycle)
color_palette = px.colors.qualitative.Plotly  # You can use Plotly's built-in color palette

# Import the Fred module for accessing Federal Reserve Economic Data (FRED)
from fredapi import Fred

fred_key = 'a88f239ebc71a89a16025e4e4f724180 '

"""#1 Creatie The Fred Object

"""

fred = Fred(api_key = fred_key)

fred

"""#2 Search for Economic Data"""

sp_search = fred.search('S&P', order_by = 'popularity')

sp_search.head()

sp_search.shape

"""# Pull Raw Data"""

sp500 = fred.get_series(series_id='SP500')
sp500_df = pd.DataFrame(sp500, columns=['SP500'])

import plotly.graph_objects as go

fig = go.Figure()

sp500 = fred.get_series(series_id='SP500')

# Create a dataframe from the series to use with Plotly
sp500_df = pd.DataFrame(sp500, columns=['SP500'])

# Create a Plotly figure
fig = go.Figure()

# Add the SP500 series to the figure
fig.add_trace(go.Scatter(x=sp500_df.index, y=sp500_df['SP500'], mode='lines', name='SP500'))

# Customize the layout
fig.update_layout(
    title='S&P 500 Time Series',
    xaxis_title='Date',
    yaxis_title='S&P 500 Index',
    template='plotly_dark'
)

# Show the plot
fig.show()

unrate = fred.get_series(series_id='UNRATE')
unrate_df = pd.DataFrame(unrate, columns = ['UNRATE'])
unrate_df

fig = go.Figure()


fig.add_trace(go.Scatter(x=unrate_df.index, y=unrate_df['UNRATE'], mode='lines', name='Unemployment Rate'))


fig.update_layout(
    title='US Unemployment Rate Time Series',
    xaxis_title='Date',
    yaxis_title='Unemployment Rate (%)',
    template='plotly_dark'
)

# Show the plot
fig.show()

"""#4 Pull and Join Multiple Data Series"""

import time
all_results = []

for myid in unemp_df.index:
    results = fred.get_series(myid)
    results = results.to_frame(name=myid)
    all_results.append(results)
    time.sleep(0.1) # Don't request to fast and get blocked
uemp_results = pd.concat(all_results, axis=1)

cols_to_drop = []
for i in uemp_results:
    if len(i) > 4:
        cols_to_drop.append(i)
uemp_results = uemp_results.drop(columns = cols_to_drop, axis=1)

uemp_states = uemp_results.copy()  #.drop('UNRATE', axis=1)
uemp_states = uemp_states.dropna()
id_to_state = unemp_df['title'].str.replace('Unemployment Rate in ','').to_dict()
uemp_states.columns = [id_to_state[c] for c in uemp_states.columns]

px.line(uemp_states, title = 'Unemployment Rate in Different States')

ax_data = uemp_states.loc[uemp_states.index == '2020-05-01'].T \
    .sort_values('2020-05-01')

fig = px.bar(ax_data,
             x='2020-05-01',
             y=ax_data.index,
             orientation='h',
             title='Unemployment Rate by State, May 2020',
             labels={'2020-05-01': '% Unemployed', 'index': 'States'},
             width=800,
             height=1200)

fig.update_traces(marker_line_color='black', marker_line_width=1, width=0.7)
fig.update_layout(showlegend=False)  # Remove the legend

# Show the plot
fig.show()

"""#5 Pull April 2020 Unemployment States"""

part_df = fred.search('participation rate state', filter=('frequency','Monthly'))
part_df = part_df.query('seasonal_adjustment == "Seasonally Adjusted" and units == "Percent"')

part_id_to_state = part_df['title'].str.replace('Labor Force Participation Rate for ','').to_dict()

all_results = []

for myid in part_df.index:
    results = fred.get_series(myid)
    results = results.to_frame(name=myid)
    all_results.append(results)
    time.sleep(0.1)
part_states = pd.concat(all_results, axis=1)
part_states.columns = [part_id_to_state[c] for c in part_states.columns]

"""#6 Plot Unemployment vs Participation for each state"""

uemp_states = uemp_states.rename(columns={'the District of Columbia':'District Of Columbia'})

import plotly.graph_objects as go
from plotly.subplots import make_subplots

# Create a 10x5 grid of subplots
fig = make_subplots(
    rows=10, cols=5,
    subplot_titles=[state for state in uemp_states.columns if state not in ["District Of Columbia", "Puerto Rico"]],
    shared_xaxes=True,
    vertical_spacing=0.05,
    horizontal_spacing=0.05
)

i = 1
j = 1
for state in uemp_states.columns:
    if state in ["District Of Columbia", "Puerto Rico"]:
        continue

    # Unemployment data
    fig.add_trace(
        go.Scatter(x=uemp_states.query('index >= 2020 and index < 2022').index,
                   y=uemp_states.query('index >= 2020 and index < 2022')[state],
                   name='Unemployment', line=dict(color='blue')),
        row=i, col=j
    )

    # Participation data (secondary y-axis)
    fig.add_trace(
        go.Scatter(x=part_states.query('index >= 2020 and index < 2022').index,
                   y=part_states.query('index >= 2020 and index < 2022')[state],
                   name='Participation', line=dict(color='orange'), yaxis="y2"),
        row=i, col=j
    )

    # Move to next subplot
    j += 1
    if j > 5:  # After 5 columns, move to the next row
        j = 1
        i += 1

# Update layout for titles and axes
fig.update_layout(
    height=3000, width=1500,
    title_text="Unemployment and Participation Rates by State (2020-2022)",
    showlegend=False,
    xaxis_title="Date",
    yaxis_title="Unemployment",
    yaxis2=dict(overlaying='y', side='right', title='Participation Rate'),
)

# Show plot
fig.show()

import pandas as pd
import numpy as np
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# Create a 10x5 grid of subplots
fig = make_subplots(rows=10, cols=5,
                    shared_xaxes=True,
                    subplot_titles=[state for state in uemp_states.columns if state not in ["District Of Columbia", "Puerto Rico"]],
                    vertical_spacing=0.03)

# Loop through the states to plot unemployment and participation rates
i = 0  # subplot index
row = 1
col = 1

for state in uemp_states.columns:
    if state in ["District Of Columbia", "Puerto Rico"]:
        continue

    # Unemployment Rate
    fig.add_trace(
        go.Scatter(
            x=uemp_states.query('index >= 2020 and index < 2022').index,
            y=uemp_states.query('index >= 2020 and index < 2022')[state],
            name=f'Unemployment: {state}',
            mode='lines',
            line=dict(color='blue')
        ),
        row=row, col=col
    )

    # Participation Rate (on secondary axis)
    fig.add_trace(
        go.Scatter(
            x=part_states.query('index >= 2020 and index < 2022').index,
            y=part_states.query('index >= 2020 and index < 2022')[state],
            name=f'Participation: {state}',
            mode='lines',
            line=dict(color='orange')
        ),
        row=row, col=col
    )

    # Update row and col for subplots
    col += 1
    if col > 5:  # Move to the next row after 5 columns
        col = 1
        row += 1
    i += 1

# Update the layout
fig.update_layout(
    height=2500,  # Adjust to fit all subplots
    title_text="Unemployment and Participation Rates by State (2020-2022)",
    showlegend=False
)

# Show the plot
fig.show()

import plotly.graph_objs as go
from plotly.subplots import make_subplots


rows = 10
cols = 5


fig = make_subplots(
    rows=rows, cols=cols,
    shared_xaxes=True,
    subplot_titles=uemp_states.columns,
    specs=[[{"secondary_y": True} for _ in range(cols)] for _ in range(rows)]
)


unemp_color = 'blue'
part_color = 'orange'

i = 0
for state in uemp_states.columns:
    if state in ["District Of Columbia", "Puerto Rico"]:
        continue

    row = i // cols + 1
    col = i % cols + 1


    unem_min = uemp_states[state].min()
    unem_max = uemp_states[state].max()
    part_min = part_states[state].min()
    part_max = part_states[state].max()


    fig.add_trace(
        go.Scatter(
            x=uemp_states.query('index >= 2020 and index < 2022').index,
            y=uemp_states.query('index >= 2020 and index < 2022')[state],
            mode='lines',
            name='Unemployment',
            line=dict(color=unemp_color)
        ),
        row=row, col=col, secondary_y=False
    )

    fig.add_trace(
        go.Scatter(
            x=part_states.query('index >= 2020 and index < 2022').index,
            y=part_states.query('index >= 2020 and index < 2022')[state],
            mode='lines',
            name='Participation',
            line=dict(color=part_color)
        ),
        row=row, col=col, secondary_y=True
    )

    fig.update_yaxes(range=[unem_min, unem_max], row=row, col=col, secondary_y=False)
    fig.update_yaxes(range=[part_min, part_max], row=row, col=col, secondary_y=True)

    i += 1

fig.update_layout(
    title_text='Unemployment and Participation Rates by State (2020-2022)',
    height=3000, width=2000,
    showlegend=False
)

fig.show()

import plotly.graph_objects as go

state = 'California'


uemp_filtered = uemp_states.loc['2020-01-01':'2021-12-01', state]
part_filtered = part_states.dropna().loc['2020-01-01':'2021-12-01', state]


fig = go.Figure()


fig.add_trace(go.Scatter(x=uemp_filtered.index,
                         y=uemp_filtered,
                         name='Unemployment',
                         yaxis='y1',
                         mode='lines+markers'))


fig.add_trace(go.Scatter(x=part_filtered.index,
                         y=part_filtered,
                         name='Participation',
                         yaxis='y2',
                         mode='lines+markers',
                         line=dict(color='blue')))


fig.update_layout(
    title=state,
    xaxis=dict(title='Date'),
    yaxis=dict(title='Unemployment', side='left', showgrid=False),
    yaxis2=dict(title='Participation', side='right', overlaying='y', showgrid=False),
    legend=dict(x=0.1, y=1.1, orientation='h')
)


fig.show()